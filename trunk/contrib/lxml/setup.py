#! /usr/bin/env python

import glob
import os
import sys
from optparse import OptionParser, OptionGroup


if sys.platform == 'win32':          
    # GetText Win 32 obtained from http://gnuwin32.sourceforge.net/packages/gettext.htm
    # ....\gettext\bin\msgmerge.exe needs to be on the path
    msgfmtCmd = os.path.join('C:', 'Program Files(x86)', 'gettext', 'bin', 'msgfmt.exe')
    xgettextCmd = os.path.join('C:', 'Program Files(x86)', 'gettext', 'bin', 'xgettext.exe')
    pythonCmd = os.path.join(sys.prefix, 'bin', 'python.exe')
elif sys.platform == 'linux2' or os.name == 'darwin':
    msgmergeCmd = 'msgmerge'
    msgfmtCmd = 'msgfmt'
    xgettextCmd = 'xgettext'
    pythonCmd = os.path.join(sys.prefix, 'bin', 'python')
    
    
if "GRAMPSPATH" in os.environ:
    GRAMPSPATH = os.environ["GRAMPSPATH"]
else:
    GRAMPSPATH = "../../../.."

if not os.path.isdir(GRAMPSPATH + "/po"):
    raise ValueError("Where is GRAMPSPATH/po: '%s/po'? Use 'GRAMPSPATH=path python make.py ...'" % GRAMPSPATH)


def tests():
    """
    Testing installed programs.
    We made tests (-t flag) by displaying versions of tools if properly
    installed. Cannot run all commands without 'gettext' and 'python'.
    """
    
    try:
        print("\n====='msgmerge'=(merge our translation)================\n")
        os.system('''%(program)s -V''' % {'program': msgmergeCmd})
    except:
        print('Please, install %(program)s for updating your translation' % {'program': msgmergeCmd})
        
    try:
        print("\n==='msgfmt'=(format our translation for installation)==\n")
        os.system('''%(program)s -V''' % {'program': msgfmtCmd})
    except:
        print('Please, install %(program)s for checking your translation' % {'program': msgfmtCmd})
            
    try:
        print("\n===='xgettext' =(generate a new template)==============\n")
        os.system('''%(program)s -V''' % {'program': xgettextCmd})
    except:
        print('Please, install %(program)s for generating a new template' % {'program': xgettextCmd})
    
    try:
        print("\n=================='python'=============================\n")
        os.system('''%(program)s -V''' % {'program': pythonCmd})
    except:
        print('Please, install python')
        

def main():
    """
    The utility for handling lxml addon.
    """
    
    parser = OptionParser( 
                         description='This specific script build lxml addon', 
                         usage='%prog [options]'
                         )
                         
    translating = OptionGroup(
                          parser, 
                          "Translations Options", 
                          "Everything around translations for lxml addon."
                          )   
    parser.add_option_group(translating)
    
    building = OptionGroup(
                          parser, 
                          "Build Options", 
                          "Everything around lxml package."
                          )   
    parser.add_option_group(building)
    
    parser.add_option("-t", "--test",
			  action="store_true", dest="test", default=False,
			  help="test if programs are properly installed")
                                       
    translating.add_option("-i", "--init",
			  action="store_true", dest="init", default=False,
			  help="create the environment")
    translating.add_option("-u", "--update",
			  action="store_true", dest="update", default=False,
			  help="update the translation")
              
    building.add_option("-c", "--compile",
			  action="store_true", dest="compilation", default=False,
			  help="compile translation files for generating lxml package")
    building.add_option("-b", "--build",
			  action="store_true", dest="build", default=False,
			  help="build lxml package")
    building.add_option("-r", "--clean",
			  action="store_true", dest="clean", default=False,
			  help="remove files generated by building process")
    
    (options, args) = parser.parse_args()
    
    if options.test:
        tests()
       
    if options.init:
        init(args)
        
    if options.update:
        update(args)
        
    if options.compilation:
        compilation()
        
    if options.build:
        build()
        
    if options.clean:
        clean()
                
def init(args):
    """
    Creates the initial empty AddonDirectory/po/x-local.po file
    for the addon.
    """    
    pass
    
def update(args):
    """
    Updates AddonDirectory/po/x-local.po with the latest
    translations.
    """ 
    pass
    
def compilation():
    """
    Compile translations
    """
    
    for po in glob.glob(os.path.join('po', '*-local.po')):
        f = os.path.basename(po[:-3])
        mo = os.path.join('locale', f[:-6], 'LC_MESSAGES/', 'gramps.mo')
        directory = os.path.dirname(mo)
        if not os.path.exists(directory):
            os.makedirs(directory)
        os.system('%s po/%s.po -o %s' % (msgfmtCmd, f, mo))
        print(directory, f[:-6])
               
def build():
    """
    Build ../../download/AddonDirectory.addon.tgz
    """
    compilation()
    
    files = []
    files += glob.glob('''lxmlGramplet.py''')
    files += glob.glob('''lxmlGramplet.gpr.py''')
    files += glob.glob('''grampsxml.dtd''')
    files += glob.glob('''grampsxml.rng''')
    files += glob.glob('''lxml.css''')
    files += glob.glob('''query_html.xsl''')
    files += glob.glob('''locale/*/LC_MESSAGES/*.mo''')
    files_str = " ".join(files)
    os.system('''mkdir -p ../../download ''')
    #increment_target(glob.glob('''lxml/*gpr.py'''))
    os.system('''tar cfz "../../download/lxml2.addon.tgz" %s''' % files_str)
    
    pass
    
def clean():
    """
    Remove created files
    """
    pass  
     
if __name__ == "__main__":
	main()
